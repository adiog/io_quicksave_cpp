cmake_minimum_required(VERSION 3.5)
project(quicksave)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS -O0)

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/main)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/extern/antlr4/runtime/Cpp/runtime/src)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/extern/rapidjson/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/extern/beans/cppbeans/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/extern/plugin-engine/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/extern/googletest/googletest/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/extern/googletest/googlemock/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/extern/SQLiteCpp/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/source)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/generated)
include_directories(/usr/include/python3.5m)

SET(PROJECT_LIBRARIES proxygenhttpserver folly glog gflags)

ADD_SUBDIRECTORY(extern/googletest)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/extern/antlr4/runtime/Cpp)
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/extern/SQLiteCpp)

MACRO(COLLECT_CC current_path)
    MESSAGE("-- CollectCC -- Searching for cc-files in ${current_path}")
    FILE(GLOB children RELATIVE ${current_path} ${current_path}/*)
    FOREACH(child ${children})
        IF(IS_DIRECTORY ${current_path}/${child})
            IF("${child}" STREQUAL ".cmake")
                MESSAGE("-- CollectCC -- Skipping .cmake directory")
            ELSEIF("${child}" STREQUAL ".git")
                MESSAGE("-- CollectCC -- Skipping .git directory")
            ELSEIF("${child}" STREQUAL ".idea")
                MESSAGE("-- CollectCC -- Skipping .idea directory")
            ELSEIF("${child}" STREQUAL "build")
                MESSAGE("-- CollectCC -- Skipping build directory")
            ELSE()
                COLLECT_CC(${current_path}/${child})
            ENDIF()
        ELSE ()
            GET_FILENAME_COMPONENT(file_ext ${current_path}/${child} EXT)
            GET_FILENAME_COMPONENT(file_name ${current_path}/${child} NAME_WE)
            IF ("${file_ext}" STREQUAL ".cc")
                ADD_LIBRARY(${file_name} ${current_path}/${child})
                SET(PROJECT_LIBRARIES ${PROJECT_LIBRARIES} ${file_name})
                MESSAGE("-- CollectCC -- Adding executable ${file_name} - done")
            ENDIF ()
        ENDIF()
    ENDFOREACH()
    MESSAGE("-- CollectCC -- Searching for cc-files in ${current_path} - done")
ENDMACRO()

COLLECT_CC(${CMAKE_CURRENT_SOURCE_DIR}/source)

FILE(GLOB_RECURSE PROJECT_QSQL ${CMAKE_CURRENT_SOURCE_DIR}/generated/qsql/**.cpp)
ADD_LIBRARY(qsql ${PROJECT_QSQL})
TARGET_LINK_LIBRARIES(qsql antlr4_static)

FILE(GLOB_RECURSE PROJECT_TESTS ${CMAKE_CURRENT_SOURCE_DIR}/test/**.cc)
ADD_EXECUTABLE(mainTest ${PROJECT_TESTS})
TARGET_LINK_LIBRARIES(mainTest ${PROJECT_LIBRARIES} python3.5m antlr4_static qsql gtest gmock pthread)

FILE(GLOB_RECURSE PROJECT_MAIN ${CMAKE_CURRENT_SOURCE_DIR}/main/**.cc)
ADD_EXECUTABLE(main ${PROJECT_MAIN} main/Config.h)
TARGET_LINK_LIBRARIES(main ${PROJECT_LIBRARIES} dl python3.5m ssl SQLiteCpp sqlite3 antlr4_static qsql pthread)

