// generated by ../../sqlpp11/scripts/ddl2cpp db.ddl ../../../generated/qsgen/orm/sqlppTables qs::orm
#ifndef QS_ORM_SQLPPTABLES_H
#define QS_ORM_SQLPPTABLES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace qs
{
namespace orm
{
  namespace Meta_
  {
    struct MetaHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "meta_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T metaHash;
            T& operator()() { return metaHash; }
            const T& operator()() const { return metaHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Author
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "author";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T author;
            T& operator()() { return author; }
            const T& operator()() const { return author; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct CreatedAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "created_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdAt;
            T& operator()() { return createdAt; }
            const T& operator()() const { return createdAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Icon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon;
            T& operator()() { return icon; }
            const T& operator()() const { return icon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct MetaType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "meta_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T metaType;
            T& operator()() { return metaType; }
            const T& operator()() const { return metaType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ModifiedAt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modified_at";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modifiedAt;
            T& operator()() { return modifiedAt; }
            const T& operator()() const { return modifiedAt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct SourceTitle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "source_title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sourceTitle;
            T& operator()() { return sourceTitle; }
            const T& operator()() const { return sourceTitle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct SourceUrl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "source_url";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sourceUrl;
            T& operator()() { return sourceUrl; }
            const T& operator()() const { return sourceUrl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct UserHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userHash;
            T& operator()() { return userHash; }
            const T& operator()() const { return userHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Meta_

  struct Meta: sqlpp::table_t<Meta,
               Meta_::MetaHash,
               Meta_::Author,
               Meta_::CreatedAt,
               Meta_::Icon,
               Meta_::MetaType,
               Meta_::ModifiedAt,
               Meta_::Name,
               Meta_::SourceTitle,
               Meta_::SourceUrl,
               Meta_::Text,
               Meta_::UserHash>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "meta";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T meta;
        T& operator()() { return meta; }
        const T& operator()() const { return meta; }
      };
    };
  };
  namespace File_
  {
    struct FileHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "file_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fileHash;
            T& operator()() { return fileHash; }
            const T& operator()() const { return fileHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Filename
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "filename";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filename;
            T& operator()() { return filename; }
            const T& operator()() const { return filename; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Filesize
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "filesize";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T filesize;
            T& operator()() { return filesize; }
            const T& operator()() const { return filesize; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct MetaHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "meta_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T metaHash;
            T& operator()() { return metaHash; }
            const T& operator()() const { return metaHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Mimetype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mimetype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mimetype;
            T& operator()() { return mimetype; }
            const T& operator()() const { return mimetype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace File_

  struct File: sqlpp::table_t<File,
               File_::FileHash,
               File_::Filename,
               File_::Filesize,
               File_::MetaHash,
               File_::Mimetype>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "file";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T file;
        T& operator()() { return file; }
        const T& operator()() const { return file; }
      };
    };
  };
  namespace Action_
  {
    struct ActionHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "action_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionHash;
            T& operator()() { return actionHash; }
            const T& operator()() const { return actionHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Kwargs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "kwargs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T kwargs;
            T& operator()() { return kwargs; }
            const T& operator()() const { return kwargs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct MetaHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "meta_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T metaHash;
            T& operator()() { return metaHash; }
            const T& operator()() const { return metaHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Action_

  struct Action: sqlpp::table_t<Action,
               Action_::ActionHash,
               Action_::Kwargs,
               Action_::MetaHash,
               Action_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "action";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T action;
        T& operator()() { return action; }
        const T& operator()() const { return action; }
      };
    };
  };
  namespace Tag_
  {
    struct TagHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tag_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tagHash;
            T& operator()() { return tagHash; }
            const T& operator()() const { return tagHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct MetaHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "meta_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T metaHash;
            T& operator()() { return metaHash; }
            const T& operator()() const { return metaHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct UserHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userHash;
            T& operator()() { return userHash; }
            const T& operator()() const { return userHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  } // namespace Tag_

  struct Tag: sqlpp::table_t<Tag,
               Tag_::TagHash,
               Tag_::MetaHash,
               Tag_::Name,
               Tag_::UserHash,
               Tag_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "tag";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T tag;
        T& operator()() { return tag; }
        const T& operator()() const { return tag; }
      };
    };
  };
  namespace Key_
  {
    struct KeyHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "key_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T keyHash;
            T& operator()() { return keyHash; }
            const T& operator()() const { return keyHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct UserHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userHash;
            T& operator()() { return userHash; }
            const T& operator()() const { return userHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Key_

  struct Key: sqlpp::table_t<Key,
               Key_::KeyHash,
               Key_::Name,
               Key_::UserHash,
               Key_::Value>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "key";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T key;
        T& operator()() { return key; }
        const T& operator()() const { return key; }
      };
    };
  };
  namespace Perspective_
  {
    struct PerspectiveHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "perspective_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T perspectiveHash;
            T& operator()() { return perspectiveHash; }
            const T& operator()() const { return perspectiveHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct DefinedQuery
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "defined_query";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T definedQuery;
            T& operator()() { return definedQuery; }
            const T& operator()() const { return definedQuery; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Ordering
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ordering";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ordering;
            T& operator()() { return ordering; }
            const T& operator()() const { return ordering; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct RefinedQuery
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "refined_query";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refinedQuery;
            T& operator()() { return refinedQuery; }
            const T& operator()() const { return refinedQuery; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct UserHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userHash;
            T& operator()() { return userHash; }
            const T& operator()() const { return userHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Perspective_

  struct Perspective: sqlpp::table_t<Perspective,
               Perspective_::PerspectiveHash,
               Perspective_::DefinedQuery,
               Perspective_::Name,
               Perspective_::Ordering,
               Perspective_::RefinedQuery,
               Perspective_::UserHash>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "perspective";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T perspective;
        T& operator()() { return perspective; }
        const T& operator()() const { return perspective; }
      };
    };
  };
  namespace User_
  {
    struct UserHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userHash;
            T& operator()() { return userHash; }
            const T& operator()() const { return userHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct DatabaseConnectionString
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "databaseConnectionString";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T databaseConnectionString;
            T& operator()() { return databaseConnectionString; }
            const T& operator()() const { return databaseConnectionString; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct StorageConnectionString
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "storageConnectionString";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T storageConnectionString;
            T& operator()() { return storageConnectionString; }
            const T& operator()() const { return storageConnectionString; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace User_

  struct User: sqlpp::table_t<User,
               User_::UserHash,
               User_::DatabaseConnectionString,
               User_::Password,
               User_::StorageConnectionString,
               User_::Username>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "user";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T user;
        T& operator()() { return user; }
        const T& operator()() const { return user; }
      };
    };
  };
} // namespace qs
} // namespace orm
#endif
