// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#pragma once

#include <CppBeans.h>

#include <memory>
#include <folly/io/IOBuf.h>
#include <rapidjson/document.h>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/writer.h>


namespace qs {

class KeyBean
{
public:
    KeyBean() = default;

    KeyBean(const char* json)
            : KeyBean(rapidjson::Document{}.Parse(json))
    {
    }

    KeyBean(absl::optional<std::string> key_hash, std::string name, std::string user_hash, std::string value)
            : key_hash(key_hash)
            , name(name)
            , user_hash(user_hash)
            , value(value)
    {
    }

    KeyBean(const rapidjson::Value& value)
    {
        if (value.HasMember(key_hash_label)) this->key_hash = absl::make_optional<std::string>(Typoid<std::string>::FromValue(value[key_hash_label]));
        if (value.HasMember(name_label))
            this->name = Typoid<std::string>::FromValue(value[name_label]);
        else
            throw(missing_mandatory_field(name_label));
        if (value.HasMember(user_hash_label))
            this->user_hash = Typoid<std::string>::FromValue(value[user_hash_label]);
        else
            throw(missing_mandatory_field(user_hash_label));
        if (value.HasMember(value_label))
            this->value = Typoid<std::string>::FromValue(value[value_label]);
        else
            throw(missing_mandatory_field(value_label));
    }

    void update(KeyBean bean)
    {
        if (bean.key_hash) key_hash = bean.key_hash;
        name = bean.name;
        user_hash = bean.user_hash;
        value = bean.value;
    }

    template <typename Writer>
    void Serialize(Writer& writer) const
    {
        writer.StartObject();
        if (key_hash) writer.String(key_hash_label);
        if (key_hash) Typoid<std::string>::Serialize(*key_hash, writer);
        writer.String(name_label);
        Typoid<std::string>::Serialize(name, writer);
        writer.String(user_hash_label);
        Typoid<std::string>::Serialize(user_hash, writer);
        writer.String(value_label);
        Typoid<std::string>::Serialize(value, writer);
        writer.EndObject();
    }

    friend std::ostream& operator<<(std::ostream& os, const KeyBean& bean)
    {
        rapidjson::StringBuffer s;
        rapidjson::PrettyWriter<rapidjson::StringBuffer> writer(s);
        bean.Serialize(writer);
        os << s.GetString();
        return os;
    }

    std::string to_string() const
    {
        rapidjson::StringBuffer s;
        rapidjson::Writer<rapidjson::StringBuffer> writer(s);
        Serialize(writer);
        return s.GetString();
    }

    operator std::unique_ptr<folly::IOBuf>() const { return folly::IOBuf::copyBuffer(::serialize(*this)); }

    const char* __name__ = "KeyBean";
    absl::optional<std::string> key_hash;
    const char* key_hash_label = "key_hash";
    std::string name;
    const char* name_label = "name";
    std::string user_hash;
    const char* user_hash_label = "user_hash";
    std::string value;
    const char* value_label = "value";
};
}
