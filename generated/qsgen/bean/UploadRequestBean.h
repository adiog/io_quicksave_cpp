// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#ifndef UPLOADREQUESTBEAN_H
#define UPLOADREQUESTBEAN_H

#include <CppBeans.h>

#include <memory>
#include <folly/io/IOBuf.h>
#include <rapidjson/document.h>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/writer.h>


class UploadRequestBean
{
public:
    UploadRequestBean() = default;

    UploadRequestBean(const char* json)
            : UploadRequestBean(rapidjson::Document{}.Parse(json))
    {
    }

    UploadRequestBean(Base64 filebase, std::string filename, std::string meta_hash, std::string mimetype)
            : filebase(filebase)
            , filename(filename)
            , meta_hash(meta_hash)
            , mimetype(mimetype)
    {
    }

    UploadRequestBean(const rapidjson::Value& value)
    {
        if (value.HasMember(filebase_label))
            this->filebase = Typoid<Base64>::FromValue(value[filebase_label]);
        else
            throw(missing_mandatory_field(filebase_label));
        if (value.HasMember(filename_label))
            this->filename = Typoid<std::string>::FromValue(value[filename_label]);
        else
            throw(missing_mandatory_field(filename_label));
        if (value.HasMember(meta_hash_label))
            this->meta_hash = Typoid<std::string>::FromValue(value[meta_hash_label]);
        else
            throw(missing_mandatory_field(meta_hash_label));
        if (value.HasMember(mimetype_label))
            this->mimetype = Typoid<std::string>::FromValue(value[mimetype_label]);
        else
            throw(missing_mandatory_field(mimetype_label));
    }

    void update(UploadRequestBean bean)
    {
        filebase = bean.filebase;
        filename = bean.filename;
        meta_hash = bean.meta_hash;
        mimetype = bean.mimetype;
    }

    template <typename Writer>
    void Serialize(Writer& writer) const
    {
        writer.StartObject();
        writer.String(filebase_label);
        Typoid<Base64>::Serialize(filebase, writer);
        writer.String(filename_label);
        Typoid<std::string>::Serialize(filename, writer);
        writer.String(meta_hash_label);
        Typoid<std::string>::Serialize(meta_hash, writer);
        writer.String(mimetype_label);
        Typoid<std::string>::Serialize(mimetype, writer);
        writer.EndObject();
    }

    friend std::ostream& operator<<(std::ostream& os, const UploadRequestBean& bean)
    {
        rapidjson::StringBuffer s;
        rapidjson::PrettyWriter<rapidjson::StringBuffer> writer(s);
        bean.Serialize(writer);
        os << s.GetString();
        return os;
    }

    std::string to_string() const
    {
        rapidjson::StringBuffer s;
        rapidjson::Writer<rapidjson::StringBuffer> writer(s);
        Serialize(writer);
        return s.GetString();
    }

    operator std::unique_ptr<folly::IOBuf>() const { return folly::IOBuf::copyBuffer(::serialize(*this)); }

    const char* __name__ = "UploadRequestBean";
    Base64 filebase;
    const char* filebase_label = "filebase";
    std::string filename;
    const char* filename_label = "filename";
    std::string meta_hash;
    const char* meta_hash_label = "meta_hash";
    std::string mimetype;
    const char* mimetype_label = "mimetype";
};

#endif
