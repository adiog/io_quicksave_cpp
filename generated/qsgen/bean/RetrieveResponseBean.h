// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#ifndef RETRIEVERESPONSEBEAN_H
#define RETRIEVERESPONSEBEAN_H

#include <CppBeans.h>

#include <folly/io/IOBuf.h>
#include <memory>
#include <rapidjson/document.h>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/writer.h>

#include <qsgen/bean/ItemBean.h>

class RetrieveResponseBean {
public:
  RetrieveResponseBean() = default;

  RetrieveResponseBean(const char *json)
      : RetrieveResponseBean(rapidjson::Document{}.Parse(json)) {}

  RetrieveResponseBean(List<ItemBean> items, int total)
      : items(items), total(total) {}

  RetrieveResponseBean(const rapidjson::Value &value) {
    if (value.HasMember(items_label))
      this->items = Typoid<List<ItemBean>>::FromValue(value[items_label]);
    else
      throw(missing_mandatory_field(items_label));
    if (value.HasMember(total_label))
      this->total = Typoid<int>::FromValue(value[total_label]);
    else
      throw(missing_mandatory_field(total_label));
  }

  void update(RetrieveResponseBean bean) {
    items = bean.items;
    total = bean.total;
  }

  template <typename Writer> void Serialize(Writer &writer) const {
    writer.StartObject();
    writer.String(items_label);
    Typoid<List<ItemBean>>::Serialize(items, writer);
    writer.String(total_label);
    Typoid<int>::Serialize(total, writer);
    writer.EndObject();
  }

  std::string to_string() const {
    rapidjson::StringBuffer s;
    rapidjson::Writer<rapidjson::StringBuffer> writer(s);
    Serialize(writer);
    return s.GetString();
  }

  operator std::unique_ptr<folly::IOBuf>() const {
    return folly::IOBuf::copyBuffer(::serialize(*this));
  }

  const char *__name__ = "RetrieveResponseBean";
  List<ItemBean> items;
  const char *items_label = "items";
  int total;
  const char *total_label = "total";
};

#endif
