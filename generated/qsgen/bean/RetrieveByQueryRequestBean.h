// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#ifndef RETRIEVEBYQUERYREQUESTBEAN_H
#define RETRIEVEBYQUERYREQUESTBEAN_H

#include <CppBeans.h>

#include <folly/io/IOBuf.h>
#include <memory>
#include <rapidjson/document.h>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/writer.h>

class RetrieveByQueryRequestBean {
public:
  RetrieveByQueryRequestBean() = default;

  RetrieveByQueryRequestBean(const char *json)
      : RetrieveByQueryRequestBean(rapidjson::Document{}.Parse(json)) {}

  RetrieveByQueryRequestBean(absl::optional<int> limit,
                             absl::optional<int> offset, std::string query)
      : limit(limit), offset(offset), query(query) {}

  RetrieveByQueryRequestBean(const rapidjson::Value &value) {
    if (value.HasMember(limit_label))
      this->limit =
          absl::make_optional<int>(Typoid<int>::FromValue(value[limit_label]));
    if (value.HasMember(offset_label))
      this->offset =
          absl::make_optional<int>(Typoid<int>::FromValue(value[offset_label]));
    if (value.HasMember(query_label))
      this->query = Typoid<std::string>::FromValue(value[query_label]);
    else
      throw(missing_mandatory_field(query_label));
  }

  void update(RetrieveByQueryRequestBean bean) {
    if (bean.limit)
      limit = bean.limit;
    if (bean.offset)
      offset = bean.offset;
    query = bean.query;
  }

  template <typename Writer> void Serialize(Writer &writer) const {
    writer.StartObject();
    if (limit)
      writer.String(limit_label);
    if (limit)
      Typoid<int>::Serialize(*limit, writer);
    if (offset)
      writer.String(offset_label);
    if (offset)
      Typoid<int>::Serialize(*offset, writer);
    writer.String(query_label);
    Typoid<std::string>::Serialize(query, writer);
    writer.EndObject();
  }

  std::string to_string() const {
    rapidjson::StringBuffer s;
    rapidjson::Writer<rapidjson::StringBuffer> writer(s);
    Serialize(writer);
    return s.GetString();
  }

  operator std::unique_ptr<folly::IOBuf>() const {
    return folly::IOBuf::copyBuffer(::serialize(*this));
  }

  const char *__name__ = "RetrieveByQueryRequestBean";
  absl::optional<int> limit;
  const char *limit_label = "limit";
  absl::optional<int> offset;
  const char *offset_label = "offset";
  std::string query;
  const char *query_label = "query";
};

#endif
