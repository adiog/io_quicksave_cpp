// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#ifndef METAUPDATEREQUESTBEAN_H
#define METAUPDATEREQUESTBEAN_H

#include <CppBeans.h>

#include <memory>
#include <folly/io/IOBuf.h>
#include <rapidjson/document.h>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/writer.h>

#include <qsgen/bean/MetaBean.h>


class MetaUpdateRequestBean
{
public:
    MetaUpdateRequestBean() = default;

    MetaUpdateRequestBean(const char* json)
            : MetaUpdateRequestBean(rapidjson::Document{}.Parse(json))
    {
    }

    MetaUpdateRequestBean(MetaBean meta)
            : meta(meta)
    {
    }

    MetaUpdateRequestBean(const rapidjson::Value& value)
    {
        if (value.HasMember(meta_label))
            this->meta = Typoid<MetaBean>::FromValue(value[meta_label]);
        else
            throw(missing_mandatory_field(meta_label));
    }

    void update(MetaUpdateRequestBean bean)
    {
        meta = bean.meta;
    }

    template <typename Writer>
    void Serialize(Writer& writer) const
    {
        writer.StartObject();
        writer.String(meta_label);
        Typoid<MetaBean>::Serialize(meta, writer);
        writer.EndObject();
    }

    friend std::ostream& operator<<(std::ostream& os, const MetaUpdateRequestBean& bean)
    {
        rapidjson::StringBuffer s;
        rapidjson::PrettyWriter<rapidjson::StringBuffer> writer(s);
        bean.Serialize(writer);
        os << s.GetString();
        return os;
    }

    std::string to_string() const
    {
        rapidjson::StringBuffer s;
        rapidjson::Writer<rapidjson::StringBuffer> writer(s);
        Serialize(writer);
        return s.GetString();
    }

    operator std::unique_ptr<folly::IOBuf>() const { return folly::IOBuf::copyBuffer(::serialize(*this)); }

    const char* __name__ = "MetaUpdateRequestBean";
    MetaBean meta;
    const char* meta_label = "meta";
};

#endif
