// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#ifndef CREATEREQUESTBEAN_H
#define CREATEREQUESTBEAN_H

#include <CppBeans.h>

#include <folly/io/IOBuf.h>
#include <memory>
#include <rapidjson/document.h>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/writer.h>

#include <qsgen/bean/MetaBean.h>

class CreateRequestBean {
public:
  CreateRequestBean() = default;

  CreateRequestBean(const char *json)
      : CreateRequestBean(rapidjson::Document{}.Parse(json)) {}

  CreateRequestBean(absl::optional<Base64> attachment,
                    absl::optional<List<std::string>> attachment_mime_types,
                    absl::optional<std::string> attachment_name,
                    absl::optional<int> attachment_provider_id,
                    absl::optional<std::string> hints, MetaBean meta)
      : attachment(attachment), attachment_mime_types(attachment_mime_types),
        attachment_name(attachment_name),
        attachment_provider_id(attachment_provider_id), hints(hints),
        meta(meta) {}

  CreateRequestBean(const rapidjson::Value &value) {
    if (value.HasMember(attachment_label))
      this->attachment = absl::make_optional<Base64>(
          Typoid<Base64>::FromValue(value[attachment_label]));
    if (value.HasMember(attachment_mime_types_label))
      this->attachment_mime_types = absl::make_optional<List<std::string>>(
          Typoid<List<std::string>>::FromValue(
              value[attachment_mime_types_label]));
    if (value.HasMember(attachment_name_label))
      this->attachment_name = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[attachment_name_label]));
    if (value.HasMember(attachment_provider_id_label))
      this->attachment_provider_id = absl::make_optional<int>(
          Typoid<int>::FromValue(value[attachment_provider_id_label]));
    if (value.HasMember(hints_label))
      this->hints = absl::make_optional<std::string>(
          Typoid<std::string>::FromValue(value[hints_label]));
    if (value.HasMember(meta_label))
      this->meta = Typoid<MetaBean>::FromValue(value[meta_label]);
    else
      throw(missing_mandatory_field(meta_label));
  }

  void update(CreateRequestBean bean) {
    if (bean.attachment)
      attachment = bean.attachment;
    if (bean.attachment_mime_types)
      attachment_mime_types = bean.attachment_mime_types;
    if (bean.attachment_name)
      attachment_name = bean.attachment_name;
    if (bean.attachment_provider_id)
      attachment_provider_id = bean.attachment_provider_id;
    if (bean.hints)
      hints = bean.hints;
    meta = bean.meta;
  }

  template <typename Writer> void Serialize(Writer &writer) const {
    writer.StartObject();
    if (attachment)
      writer.String(attachment_label);
    if (attachment)
      Typoid<Base64>::Serialize(*attachment, writer);
    if (attachment_mime_types)
      writer.String(attachment_mime_types_label);
    if (attachment_mime_types)
      Typoid<List<std::string>>::Serialize(*attachment_mime_types, writer);
    if (attachment_name)
      writer.String(attachment_name_label);
    if (attachment_name)
      Typoid<std::string>::Serialize(*attachment_name, writer);
    if (attachment_provider_id)
      writer.String(attachment_provider_id_label);
    if (attachment_provider_id)
      Typoid<int>::Serialize(*attachment_provider_id, writer);
    if (hints)
      writer.String(hints_label);
    if (hints)
      Typoid<std::string>::Serialize(*hints, writer);
    writer.String(meta_label);
    Typoid<MetaBean>::Serialize(meta, writer);
    writer.EndObject();
  }

  std::string to_string() const {
    rapidjson::StringBuffer s;
    rapidjson::Writer<rapidjson::StringBuffer> writer(s);
    Serialize(writer);
    return s.GetString();
  }

  operator std::unique_ptr<folly::IOBuf>() const {
    return folly::IOBuf::copyBuffer(::serialize(*this));
  }

  const char *__name__ = "CreateRequestBean";
  absl::optional<Base64> attachment;
  const char *attachment_label = "attachment";
  absl::optional<List<std::string>> attachment_mime_types;
  const char *attachment_mime_types_label = "attachment_mime_types";
  absl::optional<std::string> attachment_name;
  const char *attachment_name_label = "attachment_name";
  absl::optional<int> attachment_provider_id;
  const char *attachment_provider_id_label = "attachment_provider_id";
  absl::optional<std::string> hints;
  const char *hints_label = "hints";
  MetaBean meta;
  const char *meta_label = "meta";
};

#endif
