// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#ifndef VIEWUPDATEREQUESTBEAN_H
#define VIEWUPDATEREQUESTBEAN_H

#include "rapidjson/document.h"
#include "rapidjson/stringbuffer.h"
#include "rapidjson/writer.h"
#include <CppBeans.h>
#include <folly/io/IOBuf.h>
#include <memory>

#include <generated/qsgen/bean/ViewBean.h>

class ViewUpdateRequestBean {
public:
  ViewUpdateRequestBean() = default;

  ViewUpdateRequestBean(const char *json)
      : ViewUpdateRequestBean(rapidjson::Document{}.Parse(json)) {}

  ViewUpdateRequestBean(ViewBean perspective) : perspective(perspective) {}

  ViewUpdateRequestBean(const rapidjson::Value &value) {
    if (value.HasMember(perspective_label))
      this->perspective = Typoid<ViewBean>::FromValue(value[perspective_label]);
    else
      throw(missing_mandatory_field(perspective_label));
  }

  void update(ViewUpdateRequestBean bean) { perspective = bean.perspective; }

  template <typename Writer> void Serialize(Writer &writer) const {
    writer.StartObject();
    writer.String(perspective_label);
    Typoid<ViewBean>::Serialize(perspective, writer);
    writer.EndObject();
  }

  std::string to_string() const {
    rapidjson::StringBuffer s;
    rapidjson::Writer<rapidjson::StringBuffer> writer(s);
    Serialize(writer);
    return s.GetString();
  }

  operator std::unique_ptr<folly::IOBuf>() const {
    return folly::IOBuf::copyBuffer(::serialize(*this));
  }

  const char *__name__ = "ViewUpdateRequestBean";
  ViewBean perspective;
  const char *perspective_label = "perspective";
};

#endif
