// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#pragma once

#include <iostream>
#include <string>

#include <folly/Format.h>

#include <SQLiteCpp/SQLiteCpp.h>

#include <CppBeans.h>
#include <qs/database/SqliteTransaction.h>
#include <qs/util/hash.h>
#include <qsgen/bean/FileBean.h>

template <typename DB, typename T> class DatabaseBean;

using DB = SQLite::Database;

template <> class DatabaseBean<DB, FileBean> {
public:
  static absl::optional<FileBean> get(DB *sqliteDatabase, std::string hash) {
    try {
      SQLite::Statement query(*sqliteDatabase,
                              "SELECT * FROM file WHERE file_hash = ?");

      query.bind(1, hash);

      while (query.executeStep()) {
        FileBean bean;

        int getIndex = 0;
        bean.file_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.filename = query.getColumn(getIndex++).getString();
        bean.filesize = query.getColumn(getIndex++).getInt();
        bean.meta_hash = query.getColumn(getIndex++).getString();
        bean.mimetype = query.getColumn(getIndex++).getString();

        return bean;
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return absl::nullopt;
    }
  }

  template <typename FIELD_VALUE>
  static List<FileBean> get_by(DB *sqliteDatabase, std::string field,
                               FIELD_VALUE field_value) {
    List<FileBean> result(0);

    try {
      std::string query_str =
          folly::format("SELECT * FROM file WHERE {} = ?", field.c_str()).str();
      SQLite::Statement query(*sqliteDatabase, query_str.c_str());

      query.bind(1, field_value);

      while (query.executeStep()) {
        FileBean bean;

        int getIndex = 0;
        bean.file_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.filename = query.getColumn(getIndex++).getString();
        bean.filesize = query.getColumn(getIndex++).getInt();
        bean.meta_hash = query.getColumn(getIndex++).getString();
        bean.mimetype = query.getColumn(getIndex++).getString();

        result.push_back(bean);
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return result;
    }

    return result;
  }

  static void remove(DB *sqliteDatabase, std::string hash) {
    try {
      SQLite::Statement query(*sqliteDatabase,
                              "DELETE FROM file WHERE file_hash = ?");

      query.bind(1, hash);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  template <typename FIELD_VALUE>
  static void remove_by(DB *sqliteDatabase, std::string field,
                        FIELD_VALUE field_value) {
    try {
      std::string query_str =
          folly::format("DELETE FROM file WHERE {} = ?", field.c_str()).str();
      SQLite::Statement query(*sqliteDatabase, query_str.c_str());

      query.bind(1, field_value);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static List<FileBean> sql(DB *sqliteDatabase, std::string sql) {
    List<FileBean> result(0);

    try {
      SQLite::Statement query(*sqliteDatabase, sql.c_str());

      while (query.executeStep()) {
        FileBean bean;
        int getIndex = 0;

        bean.file_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.filename = query.getColumn(getIndex++).getString();
        bean.filesize = query.getColumn(getIndex++).getInt();
        bean.meta_hash = query.getColumn(getIndex++).getString();
        bean.mimetype = query.getColumn(getIndex++).getString();

        result.push_back(bean);
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return result;
    }

    return result;
  }

  static std::string insert(DB *sqliteDatabase, FileBean bean) {
    try {
      SQLite::Statement query(*sqliteDatabase, "INSERT INTO file ('file_hash', "
                                               "'filename', 'filesize', "
                                               "'meta_hash', 'mimetype') "
                                               "VALUES (?, ?, ?, ?, ?)");

      int bindIndex = 1;
      if (!bean.file_hash)
        bean.file_hash = qs::util::Hash::get();
      if (bean.file_hash)
        query.bind(bindIndex++, *bean.file_hash);
      else
        query.bind(bindIndex++);
      query.bind(bindIndex++, bean.filename);
      query.bind(bindIndex++, bean.filesize);
      query.bind(bindIndex++, bean.meta_hash);
      query.bind(bindIndex++, bean.mimetype);

      query.exec();

      return *bean.file_hash;
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void insert_with_pk(DB *sqliteDatabase, FileBean bean) {
    try {
      SQLite::Statement query(*sqliteDatabase, "INSERT INTO file ('file_hash', "
                                               "'filename', 'filesize', "
                                               "'meta_hash', 'mimetype') "
                                               "VALUES (?, ?, ?, ?, ?)");

      int bindIndex = 1;
      if (bean.file_hash)
        query.bind(bindIndex++, *bean.file_hash);
      else
        query.bind(bindIndex++);
      query.bind(bindIndex++, bean.filename);
      query.bind(bindIndex++, bean.filesize);
      query.bind(bindIndex++, bean.meta_hash);
      query.bind(bindIndex++, bean.mimetype);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void update(DB *sqliteDatabase, FileBean bean) {
    try {
      std::string setBuilder = "";
      setBuilder += ((setBuilder != "") ? std::string(", ") : std::string("")) +
                    std::string("filename = ?");
      setBuilder += ((setBuilder != "") ? std::string(", ") : std::string("")) +
                    std::string("filesize = ?");
      setBuilder += ((setBuilder != "") ? std::string(", ") : std::string("")) +
                    std::string("meta_hash = ?");
      setBuilder += ((setBuilder != "") ? std::string(", ") : std::string("")) +
                    std::string("mimetype = ?");
      std::string query_template =
          folly::format("UPDATE file SET {} WHERE file_hash = ?",
                        setBuilder.c_str())
              .str();
      SQLite::Statement query(*sqliteDatabase, query_template.c_str());

      int bindIndex = 1;
      query.bind(bindIndex++, bean.filename);
      query.bind(bindIndex++, bean.filesize);
      query.bind(bindIndex++, bean.meta_hash);
      query.bind(bindIndex++, bean.mimetype);

      query.bind(bindIndex++, *bean.file_hash);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void override(DB *sqliteDatabase, FileBean bean) {
    try {
      SQLite::Statement query(*sqliteDatabase, "UPDATE file SET file_hash = ?, "
                                               "filename = ?, filesize = ?, "
                                               "meta_hash = ?, mimetype = ? "
                                               "WHERE file_hash = ?");

      int bindIndex = 1;

      query.bind(bindIndex++, bean.filename);
      query.bind(bindIndex++, bean.filesize);
      query.bind(bindIndex++, bean.meta_hash);
      query.bind(bindIndex++, bean.mimetype);

      query.bind(bindIndex++, *bean.file_hash);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }
};
