// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#pragma once

#include <iostream>
#include <string>

#include <folly/Format.h>

#include <SQLiteCpp/SQLiteCpp.h>

#include <CppBeans.h>
#include <qs/database/SqliteTransaction.h>
#include <qs/util/hash.h>
#include <qsgen/bean/PerspectiveBean.h>

template <typename DB, typename T> class DatabaseBean;

using DB = SQLite::Database;

template <> class DatabaseBean<DB, PerspectiveBean> {
public:
  static absl::optional<PerspectiveBean> get(DB *sqliteDatabase,
                                             std::string hash) {
    try {
      SQLite::Statement query(
          *sqliteDatabase,
          "SELECT * FROM perspective WHERE perspective_hash = ?");

      query.bind(1, hash);

      while (query.executeStep()) {
        PerspectiveBean bean;

        int getIndex = 0;
        bean.perspective_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.defined_query = query.getColumn(getIndex++).getString();
        bean.name = query.getColumn(getIndex++).getString();
        bean.ordering = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.refined_query = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.user_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());

        return bean;
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return absl::nullopt;
    }
  }

  template <typename FIELD_VALUE>
  static List<PerspectiveBean> get_by(DB *sqliteDatabase, std::string field,
                                      FIELD_VALUE field_value) {
    List<PerspectiveBean> result(0);

    try {
      std::string query_str =
          folly::format("SELECT * FROM perspective WHERE {} = ?", field.c_str())
              .str();
      SQLite::Statement query(*sqliteDatabase, query_str.c_str());

      query.bind(1, field_value);

      while (query.executeStep()) {
        PerspectiveBean bean;

        int getIndex = 0;
        bean.perspective_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.defined_query = query.getColumn(getIndex++).getString();
        bean.name = query.getColumn(getIndex++).getString();
        bean.ordering = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.refined_query = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.user_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());

        result.push_back(bean);
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return result;
    }

    return result;
  }

  static void remove(DB *sqliteDatabase, std::string hash) {
    try {
      SQLite::Statement query(
          *sqliteDatabase,
          "DELETE FROM perspective WHERE perspective_hash = ?");

      query.bind(1, hash);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  template <typename FIELD_VALUE>
  static void remove_by(DB *sqliteDatabase, std::string field,
                        FIELD_VALUE field_value) {
    try {
      std::string query_str =
          folly::format("DELETE FROM perspective WHERE {} = ?", field.c_str())
              .str();
      SQLite::Statement query(*sqliteDatabase, query_str.c_str());

      query.bind(1, field_value);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static List<PerspectiveBean> sql(DB *sqliteDatabase, std::string sql) {
    List<PerspectiveBean> result(0);

    try {
      SQLite::Statement query(*sqliteDatabase, sql.c_str());

      while (query.executeStep()) {
        PerspectiveBean bean;
        int getIndex = 0;

        bean.perspective_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.defined_query = query.getColumn(getIndex++).getString();
        bean.name = query.getColumn(getIndex++).getString();
        bean.ordering = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.refined_query = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());
        bean.user_hash = absl::make_optional<std::string>(
            query.getColumn(getIndex++).getString());

        result.push_back(bean);
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return result;
    }

    return result;
  }

  static std::string insert(DB *sqliteDatabase, PerspectiveBean bean) {
    try {
      SQLite::Statement query(*sqliteDatabase,
                              "INSERT INTO perspective ('perspective_hash', "
                              "'defined_query', 'name', 'ordering', "
                              "'refined_query', 'user_hash') VALUES (?, ?, ?, "
                              "?, ?, ?)");

      int bindIndex = 1;
      if (!bean.perspective_hash)
        bean.perspective_hash = qs::util::Hash::get();
      if (bean.perspective_hash)
        query.bind(bindIndex++, *bean.perspective_hash);
      else
        query.bind(bindIndex++);
      query.bind(bindIndex++, bean.defined_query);
      query.bind(bindIndex++, bean.name);
      if (bean.ordering)
        query.bind(bindIndex++, *bean.ordering);
      else
        query.bind(bindIndex++);
      if (bean.refined_query)
        query.bind(bindIndex++, *bean.refined_query);
      else
        query.bind(bindIndex++);
      if (bean.user_hash)
        query.bind(bindIndex++, *bean.user_hash);
      else
        query.bind(bindIndex++);

      query.exec();

      return *bean.perspective_hash;
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void insert_with_pk(DB *sqliteDatabase, PerspectiveBean bean) {
    try {
      SQLite::Statement query(*sqliteDatabase,
                              "INSERT INTO perspective ('perspective_hash', "
                              "'defined_query', 'name', 'ordering', "
                              "'refined_query', 'user_hash') VALUES (?, ?, ?, "
                              "?, ?, ?)");

      int bindIndex = 1;
      if (bean.perspective_hash)
        query.bind(bindIndex++, *bean.perspective_hash);
      else
        query.bind(bindIndex++);
      query.bind(bindIndex++, bean.defined_query);
      query.bind(bindIndex++, bean.name);
      if (bean.ordering)
        query.bind(bindIndex++, *bean.ordering);
      else
        query.bind(bindIndex++);
      if (bean.refined_query)
        query.bind(bindIndex++, *bean.refined_query);
      else
        query.bind(bindIndex++);
      if (bean.user_hash)
        query.bind(bindIndex++, *bean.user_hash);
      else
        query.bind(bindIndex++);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void update(DB *sqliteDatabase, PerspectiveBean bean) {
    try {
      std::string setBuilder = "";
      setBuilder += ((setBuilder != "") ? std::string(", ") : std::string("")) +
                    std::string("defined_query = ?");
      setBuilder += ((setBuilder != "") ? std::string(", ") : std::string("")) +
                    std::string("name = ?");
      if (bean.ordering) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            std::string("ordering = ?");
      }
      if (bean.refined_query) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            std::string("refined_query = ?");
      }
      if (bean.user_hash) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            std::string("user_hash = ?");
      }
      std::string query_template =
          folly::format("UPDATE perspective SET {} WHERE perspective_hash = ?",
                        setBuilder.c_str())
              .str();
      SQLite::Statement query(*sqliteDatabase, query_template.c_str());

      int bindIndex = 1;
      query.bind(bindIndex++, bean.defined_query);
      query.bind(bindIndex++, bean.name);
      if (bean.ordering)
        query.bind(bindIndex++, *bean.ordering);
      if (bean.refined_query)
        query.bind(bindIndex++, *bean.refined_query);
      if (bean.user_hash)
        query.bind(bindIndex++, *bean.user_hash);

      query.bind(bindIndex++, *bean.perspective_hash);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void override(DB *sqliteDatabase, PerspectiveBean bean) {
    try {
      SQLite::Statement query(*sqliteDatabase,
                              "UPDATE perspective SET perspective_hash = ?, "
                              "defined_query = ?, name = ?, ordering = ?, "
                              "refined_query = ?, user_hash = ? WHERE "
                              "perspective_hash = ?");

      int bindIndex = 1;

      query.bind(bindIndex++, bean.defined_query);
      query.bind(bindIndex++, bean.name);
      if (bean.ordering)
        query.bind(bindIndex++, *bean.ordering);
      else
        query.bind(bindIndex++);
      if (bean.refined_query)
        query.bind(bindIndex++, *bean.refined_query);
      else
        query.bind(bindIndex++);
      if (bean.user_hash)
        query.bind(bindIndex++, *bean.user_hash);
      else
        query.bind(bindIndex++);

      query.bind(bindIndex++, *bean.perspective_hash);

      query.exec();
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }
};
