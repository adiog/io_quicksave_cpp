// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#pragma once

#include <CppBeans.h>
#include <SQLiteCpp/SQLiteCpp.h>
#include <database/PostgresTransaction.h>
#include <qs/util/hash.h>
#include <iostream>
#include <string>
#include <util/format.h>

#include <generated/qsgen/bean/TagBean.h>

template <typename DB, typename T> class DatabaseBean;

using PostgresTransactionImpl = tao::postgres::transaction;

template <> class DatabaseBean<PostgresTransactionImpl, TagBean> {
public:
  static std::optional<TagBean> get(PostgresTransactionImpl *tr,
                                    std::string hash) {
    try {
      const char *query = "SELECT * FROM public.tag WHERE tag_hash = $1";

      auto result = tr->execute(query, hash);
      auto row = result[0];

      TagBean bean;

      int getIndex = 0;

      bean.tag_hash =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.meta_hash =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.name =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.user_hash =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.value =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));

      return bean;
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return std::none;
    }
  }

  template <typename FIELD_VALUE>
  static List<TagBean> get_by(PostgresTransactionImpl *tr, std::string field,
                              FIELD_VALUE field_value) {
    List<TagBean> result(0);

    try {
      std::string query_str = Format::format(
          "SELECT * FROM public.tag WHERE %s = $1", field.c_str());
      const char *query = query_str.c_str();

      auto query_result = tr->execute(query, field_value);

      for (int rowIndex = 0; rowIndex < query_result.size(); ++rowIndex) {
        auto row = query_result.at(rowIndex);

        TagBean bean;

        int getIndex = 0;

        bean.tag_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.meta_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.name =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.user_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.value =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));

        result.push_back(bean);
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return result;
    }

    return result;
  }

  static void remove(PostgresTransactionImpl *tr, std::string hash) {
    try {
      const char *query = "DELETE FROM public.tag WHERE tag_hash = $1";

      tr->execute(query, hash);
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  template <typename FIELD_VALUE>
  static void remove_by(PostgresTransactionImpl *tr, std::string field,
                        FIELD_VALUE field_value) {
    try {
      std::string query_str =
          Format::format("DELETE FROM public.tag WHERE %s = $1", field.c_str());
      const char *query = query_str.c_str();

      tr->execute(query, field_value);
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static List<TagBean> sql(PostgresTransactionImpl *tr, std::string sql) {
    List<TagBean> result(0);

    try {
      const char *query = sql.c_str();

      auto query_result = tr->execute(query);

      for (int rowIndex = 0; rowIndex < query_result.size(); ++rowIndex) {
        auto row = query_result.at(rowIndex);

        TagBean bean;

        int getIndex = 0;

        bean.tag_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.meta_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.name =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.user_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.value =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));

        result.push_back(bean);
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return result;
    }

    return result;
  }

  static std::string insert(PostgresTransactionImpl *tr, TagBean bean) {
    try {
      const char *query = "INSERT INTO public.tag (\"tag_hash\", "
                          "\"meta_hash\", \"name\", \"user_hash\", \"value\") "
                          "VALUES ($1, $2, $3, $4, $5)";

      int bindIndex = 1;
      if (!bean.tag_hash)
        bean.tag_hash = Hash::get();

      tr->execute(query, ((bean.tag_hash) ? (*bean.tag_hash) : std::string("")),
                  ((bean.meta_hash) ? (*bean.meta_hash) : std::string("")),
                  ((bean.name) ? (*bean.name) : std::string("")),
                  ((bean.user_hash) ? (*bean.user_hash) : std::string("")),
                  ((bean.value) ? (*bean.value) : std::string("")));

      return *bean.tag_hash;
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void insert_with_pk(PostgresTransactionImpl *tr, TagBean bean) {
    try {
      const char *query = "INSERT INTO public.tag (\"tag_hash\", "
                          "\"meta_hash\", \"name\", \"user_hash\", \"value\") "
                          "VALUES ($1, $2, $3, $4, $5)";

      tr->execute(query, ((bean.tag_hash) ? (*bean.tag_hash) : std::string("")),
                  ((bean.meta_hash) ? (*bean.meta_hash) : std::string("")),
                  ((bean.name) ? (*bean.name) : std::string("")),
                  ((bean.user_hash) ? (*bean.user_hash) : std::string("")),
                  ((bean.value) ? (*bean.value) : std::string("")));

    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void update(PostgresTransactionImpl *tr, TagBean bean) {
    try {
      std::string setBuilder = "";
      if (bean.meta_hash) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"meta_hash\" = '%s'"),
                           bean.meta_hash->c_str());
      }
      if (bean.name) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"name\" = '%s'"), bean.name->c_str());
      }
      if (bean.user_hash) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"user_hash\" = '%s'"),
                           bean.user_hash->c_str());
      }
      if (bean.value) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"value\" = '%s'"),
                           bean.value->c_str());
      }
      std::string query_template = Format::format(
          "UPDATE public.tag SET %s WHERE tag_hash = $1", setBuilder.c_str());
      const char *query = query_template.c_str();

      tr->execute(query, *bean.tag_hash);
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }
  /*
      static void override(PostgresTransactionImpl* tr, TagBean bean)
      {
          try
          {
              const char * query = "UPDATE public.tag SET tag_hash = $1,
  meta_hash = $2, name = $3, user_hash = $4, value = $5 WHERE tag_hash = ?";

              int bindIndex = 1;

              if (bean.meta_hash) query.bind(bindIndex++, *bean.meta_hash); else
  query.bind(bindIndex++); if (bean.name) query.bind(bindIndex++, *bean.name);
  else query.bind(bindIndex++); if (bean.user_hash) query.bind(bindIndex++,
  *bean.user_hash); else query.bind(bindIndex++); if (bean.value)
  query.bind(bindIndex++, *bean.value); else query.bind(bindIndex++);

              query.bind(bindIndex++, *bean.tag_hash);

              query.exec();
          }
          catch (std::exception& e)
          {
              std::cout << "exception: " << e.what() << std::endl;
          }
      }*/
};
