// This file is an AUTOGENERATED part of beans project.
// Copyright (c) 2017 Aleksander Gajewski <adiog@quicksave.io>.

#pragma once

#include <CppBeans.h>
#include <SQLiteCpp/SQLiteCpp.h>
#include <database/PostgresTransaction.h>
#include <qs/util/hash.h>
#include <iostream>
#include <string>
#include <util/format.h>

#include <generated/qsgen/bean/MetaBean.h>

template <typename DB, typename T> class DatabaseBean;

using PostgresTransactionImpl = tao::postgres::transaction;

template <> class DatabaseBean<PostgresTransactionImpl, MetaBean> {
public:
  static std::optional<MetaBean> get(PostgresTransactionImpl *tr,
                                     std::string hash) {
    try {
      const char *query = "SELECT * FROM public.meta WHERE meta_hash = $1";

      auto result = tr->execute(query, hash);
      auto row = result[0];

      MetaBean bean;

      int getIndex = 0;

      bean.meta_hash =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.author =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.created_at =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.icon =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.meta_type =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.modified_at =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.name =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.source_title =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.source_url =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.text =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));
      bean.user_hash =
          std::make_optional<std::string>(row.get<std::string>(getIndex++));

      return bean;
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return std::none;
    }
  }

  template <typename FIELD_VALUE>
  static List<MetaBean> get_by(PostgresTransactionImpl *tr, std::string field,
                               FIELD_VALUE field_value) {
    List<MetaBean> result(0);

    try {
      std::string query_str = Format::format(
          "SELECT * FROM public.meta WHERE %s = $1", field.c_str());
      const char *query = query_str.c_str();

      auto query_result = tr->execute(query, field_value);

      for (int rowIndex = 0; rowIndex < query_result.size(); ++rowIndex) {
        auto row = query_result.at(rowIndex);

        MetaBean bean;

        int getIndex = 0;

        bean.meta_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.author =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.created_at =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.icon =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.meta_type =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.modified_at =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.name =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.source_title =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.source_url =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.text =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.user_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));

        result.push_back(bean);
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return result;
    }

    return result;
  }

  static void remove(PostgresTransactionImpl *tr, std::string hash) {
    try {
      const char *query = "DELETE FROM public.meta WHERE meta_hash = $1";

      tr->execute(query, hash);
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  template <typename FIELD_VALUE>
  static void remove_by(PostgresTransactionImpl *tr, std::string field,
                        FIELD_VALUE field_value) {
    try {
      std::string query_str = Format::format(
          "DELETE FROM public.meta WHERE %s = $1", field.c_str());
      const char *query = query_str.c_str();

      tr->execute(query, field_value);
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static List<MetaBean> sql(PostgresTransactionImpl *tr, std::string sql) {
    List<MetaBean> result(0);

    try {
      const char *query = sql.c_str();

      auto query_result = tr->execute(query);

      for (int rowIndex = 0; rowIndex < query_result.size(); ++rowIndex) {
        auto row = query_result.at(rowIndex);

        MetaBean bean;

        int getIndex = 0;

        bean.meta_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.author =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.created_at =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.icon =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.meta_type =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.modified_at =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.name =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.source_title =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.source_url =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.text =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));
        bean.user_hash =
            std::make_optional<std::string>(row.get<std::string>(getIndex++));

        result.push_back(bean);
      }
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
      return result;
    }

    return result;
  }

  static std::string insert(PostgresTransactionImpl *tr, MetaBean bean) {
    try {
      const char *query = "INSERT INTO public.meta (\"meta_hash\", \"author\", "
                          "\"created_at\", \"icon\", \"meta_type\", "
                          "\"modified_at\", \"name\", \"source_title\", "
                          "\"source_url\", \"text\", \"user_hash\") VALUES "
                          "($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)";

      int bindIndex = 1;
      if (!bean.meta_hash)
        bean.meta_hash = Hash::get();

      tr->execute(
          query, ((bean.meta_hash) ? (*bean.meta_hash) : std::string("")),
          ((bean.author) ? (*bean.author) : std::string("")),
          ((bean.created_at) ? (*bean.created_at) : std::string("")),
          ((bean.icon) ? (*bean.icon) : std::string("")),
          ((bean.meta_type) ? (*bean.meta_type) : std::string("")),
          ((bean.modified_at) ? (*bean.modified_at) : std::string("")),
          ((bean.name) ? (*bean.name) : std::string("")),
          ((bean.source_title) ? (*bean.source_title) : std::string("")),
          ((bean.source_url) ? (*bean.source_url) : std::string("")),
          ((bean.text) ? (*bean.text) : std::string("")),
          ((bean.user_hash) ? (*bean.user_hash) : std::string("")));

      return *bean.meta_hash;
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void insert_with_pk(PostgresTransactionImpl *tr, MetaBean bean) {
    try {
      const char *query = "INSERT INTO public.meta (\"meta_hash\", \"author\", "
                          "\"created_at\", \"icon\", \"meta_type\", "
                          "\"modified_at\", \"name\", \"source_title\", "
                          "\"source_url\", \"text\", \"user_hash\") VALUES "
                          "($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)";

      tr->execute(
          query, ((bean.meta_hash) ? (*bean.meta_hash) : std::string("")),
          ((bean.author) ? (*bean.author) : std::string("")),
          ((bean.created_at) ? (*bean.created_at) : std::string("")),
          ((bean.icon) ? (*bean.icon) : std::string("")),
          ((bean.meta_type) ? (*bean.meta_type) : std::string("")),
          ((bean.modified_at) ? (*bean.modified_at) : std::string("")),
          ((bean.name) ? (*bean.name) : std::string("")),
          ((bean.source_title) ? (*bean.source_title) : std::string("")),
          ((bean.source_url) ? (*bean.source_url) : std::string("")),
          ((bean.text) ? (*bean.text) : std::string("")),
          ((bean.user_hash) ? (*bean.user_hash) : std::string("")));

    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }

  static void update(PostgresTransactionImpl *tr, MetaBean bean) {
    try {
      std::string setBuilder = "";
      if (bean.author) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"author\" = '%s'"),
                           bean.author->c_str());
      }
      if (bean.created_at) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"created_at\" = '%s'"),
                           bean.created_at->c_str());
      }
      if (bean.icon) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"icon\" = '%s'"), bean.icon->c_str());
      }
      if (bean.meta_type) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"meta_type\" = '%s'"),
                           bean.meta_type->c_str());
      }
      if (bean.modified_at) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"modified_at\" = '%s'"),
                           bean.modified_at->c_str());
      }
      if (bean.name) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"name\" = '%s'"), bean.name->c_str());
      }
      if (bean.source_title) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"source_title\" = '%s'"),
                           bean.source_title->c_str());
      }
      if (bean.source_url) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"source_url\" = '%s'"),
                           bean.source_url->c_str());
      }
      if (bean.text) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"text\" = '%s'"), bean.text->c_str());
      }
      if (bean.user_hash) {
        setBuilder +=
            ((setBuilder != "") ? std::string(", ") : std::string("")) +
            Format::format(std::string("\"user_hash\" = '%s'"),
                           bean.user_hash->c_str());
      }
      std::string query_template = Format::format(
          "UPDATE public.meta SET %s WHERE meta_hash = $1", setBuilder.c_str());
      const char *query = query_template.c_str();

      tr->execute(query, *bean.meta_hash);
    } catch (std::exception &e) {
      std::cout << "exception: " << e.what() << std::endl;
    }
  }
  /*
      static void override(PostgresTransactionImpl* tr, MetaBean bean)
      {
          try
          {
              const char * query = "UPDATE public.meta SET meta_hash = $1,
  author = $2, created_at = $3, icon = $4, meta_type = $5, modified_at = $6,
  name = $7, source_title = $8, source_url = $9, text = $10, user_hash = $11
  WHERE meta_hash = ?";

              int bindIndex = 1;

              if (bean.author) query.bind(bindIndex++, *bean.author); else
  query.bind(bindIndex++); if (bean.created_at) query.bind(bindIndex++,
  *bean.created_at); else query.bind(bindIndex++); if (bean.icon)
  query.bind(bindIndex++, *bean.icon); else query.bind(bindIndex++); if
  (bean.meta_type) query.bind(bindIndex++, *bean.meta_type); else
  query.bind(bindIndex++); if (bean.modified_at) query.bind(bindIndex++,
  *bean.modified_at); else query.bind(bindIndex++); if (bean.name)
  query.bind(bindIndex++, *bean.name); else query.bind(bindIndex++); if
  (bean.source_title) query.bind(bindIndex++, *bean.source_title); else
  query.bind(bindIndex++); if (bean.source_url) query.bind(bindIndex++,
  *bean.source_url); else query.bind(bindIndex++); if (bean.text)
  query.bind(bindIndex++, *bean.text); else query.bind(bindIndex++); if
  (bean.user_hash) query.bind(bindIndex++, *bean.user_hash); else
  query.bind(bindIndex++);

              query.bind(bindIndex++, *bean.meta_hash);

              query.exec();
          }
          catch (std::exception& e)
          {
              std::cout << "exception: " << e.what() << std::endl;
          }
      }*/
};
